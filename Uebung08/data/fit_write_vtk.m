%# Copyright (C) 2006-2009 Sebastian Schoeps 
%#
%# This file is part of:
%# FIDES - Field Device Simulator
%#
%# FIDES is free software; you can redistribute it and/or modify
%# it under the terms of the GNU General Public License as published by
%# the Free Software Foundation.
%#
%# This program is distributed in the hope that it will be useful,
%# but WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%# GNU General Public License for more details.
%#
%# You should have received a copy of the GNU General Public License
%# along with this program (see the file LICENSE); if not,
%# see <http://www.gnu.org/licenses/>.
%#
%# author: schoeps@math.uni-wuppertal.de

%# -*- texinfo -*- 
%#
%# @deftypefn{Function File} @
%# {} fit_write_vtk (@var{prb}, @var{file}, @
%# @var{nodedata}, @var{elemdata})
%#
%# saves FIT mesh in the VTK XML format for rectilinear grids.
%#
%# Input:
%# @itemize
%#  @item  @var{prb} = FIT problem structure
%#  @item  @var{file} = name of the target file (extension .vtr) 
%#  @item  @var{nodedata} = cell array for node data. Each row contains a
%#  description string and an array of data located at the nodes 
%#  (np-by-3) or (np-by-1)
%#  @item  @var{elemdata} = cell array for element data. Each row contains a
%#  description string and an array of data located at the nodes 
%#  ((nx-1)*(ny-1)*(nz-1)-by-3) or ((nx-1)*(ny-1)*(nz-1)-by-1)
%# @end itemize
%#
%# Example for a primary grid with three data sets:
%# @example
%# prb.X=[0:0.1:1]'; prb.Y=[0:0.2:1]'; prb.Z=[0:0.2:1]';
%# pp1 = [1:(11*6*6)]'; pc1 = [1:(10*5*5)]'; 
%# pc2 = rand(10*5*5,3);
%# fit_write_vtk (prb,'primary.vtr',...
%#              @{'NodeData',pp1@},...
%#              @{'ElemData',pc1;'RandomData',pc2@})
%# @end example
%#
%# The corresponing dual grid can be generated by
%# @example
%# x=[0:0.1:1]'; prb.X=[x(1);(x(2:end)+x(1:end-1))/2;x(end)];
%# y=[0:0.2:1]'; prb.Y=[y(1);(y(2:end)+y(1:end-1))/2;y(end)];
%# z=[0:0.2:1]'; prb.Z=[z(1);(z(2:end)+z(1:end-1))/2;z(end)];
%# fit_write_vtk (prb,'dual.vtr');
%# @end example
%#
%# Literature:
%# @itemize
%# @item @uref{http://www.vtk.org/VTK/img/file-formats.pdf, VTK File Format},@
%# taken from The VTK User's Guide
%# @end itemize
%# 
%# @end deftypefn

function fit_write_vtk (xmesh, ymesh, zmesh, file, nodedata, elemdata)

  %# initialize point data
  if nargin<5
    nodedata = {};
  end
  
  %# initialize cell data  
  if nargin<6
    elemdata = {};
  end
  
%  xmesh = prb.X;
%  ymesh = prb.Y;
%  zmesh = prb.Z;
  
  nx = length(xmesh);
  ny = length(ymesh);
  nz = length(zmesh);
  
  numnode = nx*ny*nz;

  % allow for 2D grids (e.g. nz=1)
  numelem = max(1,nx-1)*max(1,ny-1)*max(1,nz-1);
  
  % Open file
  fid = fopen (file, 'w');

  if ( fid )

    %# write header
    fprintf (fid, '<?xml version="1.0"?>\n');
    fprintf (fid, '<VTKFile type="RectilinearGrid" version="0.1" byte_order="LittleEndian">\n');
    fprintf (fid, '<RectilinearGrid WholeExtent="0 %d 0 %d 0 %d">\n',nx-1,ny-1,nz-1);
    fprintf (fid, '<Piece Extent="0 %d 0 %d 0 %d">\n',nx-1,ny-1,nz-1);

    %# start writing point data
    fprintf (fid, '<PointData>\n');
    for i=1:size(nodedata,1)
      %# write vector-valued data
      if (size(nodedata{i,2}) == [numnode,3])
        fprintf (fid, '<DataArray type="Float32" Name="%s" NumberOfComponents="3" format="ascii">\n',nodedata{i,1});
        fprintf (fid, '%g %g %g\n', nodedata{i,2}');
      elseif (size(nodedata{i,2}) == [3*numnode,1])
        nodedata{i,2} = reshape(nodedata{i,2},[],3);
        fprintf (fid, '<DataArray type="Float32" Name="%s" NumberOfComponents="3" format="ascii">\n',nodedata{i,1});
        fprintf (fid, '%g %g %g\n', nodedata{i,2}');
      %# write scalar-valued data
      elseif (size(nodedata{i,2}) == [numnode,1])
        fprintf (fid, '<DataArray type="Float32" Name="%s" format="ascii">\n',nodedata{i,1});
        fprintf (fid, '%g\n', nodedata{i,2}');
      %# dimension mismatch
      else
        error('fit_write_vtk: nodedata size (%d) does not match number of nodes (%d)',size(nodedata{i,2},1),numnode);  
      end
      fprintf (fid, '</DataArray>\n'); 
    end
    fprintf (fid, '</PointData>\n');

    %# start writing cell data
    fprintf (fid, '<CellData>\n');
    for i=1:size(elemdata,1)
      %# write vector-valued data
      if (size(elemdata{i,2}) == [numelem,3])
        fprintf (fid, '<DataArray type="Float32" Name="%s" NumberOfComponents="3" format="ascii">\n',elemdata{i,1});
        fprintf (fid, '%g %g %g\n', elemdata{i,2}');
      elseif (size(elemdata{i,2}) == [3*numelem,1])
        elemdata{i,2} = reshape(elemdata{i,2},[],3);
        fprintf (fid, '<DataArray type="Float32" Name="%s" format="ascii">\n',elemdata{i,1});
        fprintf (fid, '%g\n', elemdata{i,2}');
      %# write scalar-values data
      elseif (size(elemdata{i,2}) == [numelem,1])
        fprintf (fid, '<DataArray type="Float32" Name="%s" format="ascii">\n',elemdata{i,1});
        fprintf (fid, '%g\n', elemdata{i,2}');  
      %# dimension mismatch
      else
        error('fit_write_vtk: elemdata size (%d) does not match number of elements (%d)',size(elemdata{i,2},1),numelem);  
      end
      fprintf (fid, '</DataArray>\n'); 
    end
    fprintf (fid, '</CellData>\n'); 

    %# write mesh information (coordinates)
    fprintf (fid, '<Coordinates>\n');
    fprintf (fid, '<DataArray type="Float64" Name="X" format="ascii">\n');
    fprintf (fid,'%g ', xmesh');
    fprintf (fid, '</DataArray>\n');
    fprintf (fid, '<DataArray type="Float64" Name="Y" format="ascii">\n');
    fprintf (fid,'%g ', ymesh');
    fprintf (fid, '</DataArray>\n');
    fprintf (fid, '<DataArray type="Float64" Name="Z" format="ascii">\n');
    fprintf (fid,'%g ', zmesh');
    fprintf (fid, '</DataArray>\n');
    fprintf (fid, '</Coordinates>\n');
    
    %# write footer
    fprintf (fid, '</Piece>\n');
    fprintf (fid, '</RectilinearGrid>\n');
    fprintf (fid, '</VTKFile>');

    %# close file
    fclose (fid);
    
  else
    
    error(['fit_write_vtk: could not open file ' filename]);
  
  end %if
  
end %function

%!shared file
%!  file=[fileparts(which('fit_write_vtk')) '/../test/test.vtr'];
%!
%!# test for error message, if data has wrong dimension
%!error
%!  prb.X=[1:0.1:2]'; prb.Y=[1:0.2:2]'; prb.Z=[2:0.5:3]';
%!  fit_write_vtk (prb,file,{'wrongdim',1:4})
%!
%!# just test if the file is created
%!test
%!  prb.X=[0:0.1:1]'; prb.Y=[0:0.2:1]'; prb.Z=[0:0.2:1]';
%!  pp1 = [1:(11*6*6)]'; pc1 = [1:(10*5*5)]'; 
%!  pc2 = rand(10*5*5,3);
%!  fit_write_vtk (prb.X, prb.Y, prb.Z, file,...
%!               {'NodeData',pp1},...
%!               {'ElemData',pc1;'RandomData',pc2});
%!  s = dir(file);
%!  delete(file);
%!  assert (s.bytes>0);